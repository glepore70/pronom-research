SWAGOLX.EXE (c) 1993 GDSOFT  ALL RIGHTS RESERVED 00003         UNIT INFORMATION ROUTINES                                         1      05-28-9314:09ALL                      SWAG SUPPORT TEAM        DEBUG Information        IMPORT              8      éñt" Provided you have a copy of Borland Pascal 7.0, you can Single-step, trace„into, put breakpoints etc. in routines contained in SYSTEM.TPU.„„to do so, you must take the following steps:„-  Extract all Files from RTLSYS.ZIP„-  Assemble all .Asm Files With the following switches:„„   TAsm *.Asm /mx /zi„„(Ignore the Single error, as well as all warnings)„„-  Compile SYSTEM:„„   BPC SYSTEM /$D+ /$L+„„-  Add the directory wherein you keep the .Asm Files to the inCLUDE directories„list of BPC.CFG and/or the "Options/Directories" of the IDE.„That's it.  The benefits are enormous, especially it you do a lot of debugging„with a stand-alone debugger (TD, TD286 or TD386).  Like I used to do -- Until I„discovered the joy of using the new IDE of BP 7.  Well, too late the hero, I„guess...„„                                                                                                              2      05-28-9314:09ALL                      SWAG SUPPORT TEAM        Interface Shell Unit     IMPORT              7      éñ»c {„Now, I could go in and edit the File by hand...( But I do have a„life )  So I still am asking is it possible to find some sort of„TPU stripper Program to cut out the other sections While keeping„the needed bits still working...„„  The only thing that comes to mind is building an Interface shell„  Unit, that calls the routines you want to include from your main„  Unit. User's can then ignore your main Compiled .TPU that will„  be required to Compile With your shell Unit. For example here's„  a shell Unit that Uses the ClrScr Procedure from the standard„  TP Crt Unit:„}„„Unit MyCrt;„Interface„„Procedure ClrScr;„„Implementation„„Uses„  Crt;„„Procedure ClrScr;„begin„  Crt.ClrScr„end;„„end.„                                                                       3      05-28-9314:09ALL                      SWAG SUPPORT TEAM        Global Types In UNIT     IMPORT              10     éñº˝ {„I am wondering if it is possible to pass a Record Type and File Type to„a Procedure in a Unit where the Record or File Type has not„been declared.  if it can be done I will need a little sample„to get me going.  Thanks in advance.„„Yes, as long as the Unit With the Procedure Uses the Unit in which the Types„are declared.  That's why it's frequently a good idea to move all your global„Types and Variables to their own little Unit:„}„„Unit Globals;„„Interface„„Type„  tMyRecord = Record„    Name,Address : String[40];„    Zip : String[5];„    { etc.}„  end;„„Implementation„„end.  { of Unit Globals }„„„Unit LowLevels;„„Interface„„Uses Globals;„„Procedure GetMyRecord(Var ThisRecord : tMyRecord);„„Implementation„„Procedure GetMyRecord(Var ThisRecord : tMyRecord); begin„  { whatever }„end;„„end. { of Unit LowLevels }„„„Program  WhatEver;„„Uses Globals, LowLevels;„„Var„  MainRecord : tMyRecord;„  { depending on a lot of things, you might want to declare this„    Variable in the Unit Globals, rather than here }„„begin„  GetMyRecord(MainRecord);„end.„„                                                                                             