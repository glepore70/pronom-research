[Vertex shader]


#include "Shaders/HLSL/Preamble.shdh"
#include "Shaders/HLSL/CommonHelpers.shdh"
#include "Shaders/HLSL/GlobalConstants.shdh"

struct VertexInput
{
	uint4 BoneIndices : BLENDINDICES0;
	float4 BoneWeights : BLENDWEIGHT0;
	float3 Position : POSITION0;
};

struct VertexOutput
{
	float4 ProjectedPosition : SV_Position0;
	float Depth : TEXCOORD0;
};

VK_DESCRIPTOR(DS_Shader, 1) cbuffer CB_EngineParams : register(b1)
{
	row_major float3x4 BoneMatrices[128];
	float4x4 WorldMatrix;
};
VertexOutput main(in VertexInput In)
{
	VertexOutput Out;

	row_major float3x4 boneMatrix1 = BoneMatrices[In.BoneIndices.x];
	row_major float3x4 boneMatrix2 = BoneMatrices[In.BoneIndices.y];
	row_major float3x4 boneMatrix3 = BoneMatrices[In.BoneIndices.z];
	row_major float3x4 boneMatrix4 = BoneMatrices[In.BoneIndices.w];
	// World space position
	float4 worldPosition = float4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.x * mul(boneMatrix1, float4(In.Position, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.y * mul(boneMatrix2, float4(In.Position, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.z * mul(boneMatrix3, float4(In.Position, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (In.BoneWeights.w * mul(boneMatrix4, float4(In.Position, 1.0f))));
	worldPosition = mul(WorldMatrix, worldPosition);

	// Projected position
	float4 projectedPosition = mul(g_ViewProjectionMat, worldPosition);

	// Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	// View space position
	float4 viewPosition = mul(g_ViewMat, worldPosition);

	// Depth
	float depth = viewPosition.z;

	// Pass depth to pixel shader
	Out.Depth = depth;


	return Out;
}


[Fragment shader]


#include "Shaders/HLSL/Preamble.shdh"
#include "Shaders/HLSL/CommonHelpers.shdh"
#include "Shaders/HLSL/GlobalConstants.shdh"

struct PixelInput
{
	float4 ProjectedPosition : SV_Position0;
	float Depth : TEXCOORD0;
};

struct PixelOutput
{
};

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	float FloatParameter_DepthDifferenceBlendDistance;
	float PADDING0_FloatParameter_DepthDifferenceBlendDistance;
	float PADDING1_FloatParameter_DepthDifferenceBlendDistance;
	float PADDING2_FloatParameter_DepthDifferenceBlendDistance;
};
VK_DESCRIPTOR(DS_Shader, 3) SamplerState _PointMirrorSampler;
VK_DESCRIPTOR(DS_Shader, 4) Texture2D _sceneDepth;
void CalculateMatOpacity(in float2 in_0,
	in float in_1,
	out float out_0)
{
	// ConstantFloatNode {
	// } ConstantFloatNode
	// DepthDifferenceBlend
	float Local0 = (_sceneDepth.Sample(_PointMirrorSampler, in_0).x * g_FarPlane);
	float Local1 = (Local0 - in_1);
	float Local2 = Local1;
	float Local3 = saturate((Local2 / max(FloatParameter_DepthDifferenceBlendDistance, 0.0001f)));
	// ~DepthDifferenceBlend

	float Local4 = clamp(Local3, 0.0f, 1.0f);
	float Local5 = Local4.x;
	float Local6 = (3.1415f * 5.0f);
	float Local7 = (Local6 * Local5);
	float Local8 = (g_CurrentTime * 5.0f);
	float Local9 = (Local7 + Local8);
	float Local10 = sin(Local9);
	float Local11 = (Local10 * Local10);
	float Local12 = (1.0f - Local11);
	float Local13 = (Local5 - Local12);
	out_0 = Local13;
}

PixelOutput main(in PixelInput In)
{
	PixelOutput Out;

	float matOpacity;
	// UV position
	float2 Local0 = (In.ProjectedPosition.xy / float2(g_RTWidth, g_RTHeight));

	CalculateMatOpacity(Local0, In.Depth, matOpacity);
	clip((matOpacity - 0.5f));


	return Out;
}
