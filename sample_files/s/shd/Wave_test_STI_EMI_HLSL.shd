[Vertex shader]


#include "Shaders/HLSL/Preamble.shdh"
#include "Shaders/HLSL/CommonHelpers.shdh"
#include "Shaders/HLSL/GlobalConstants.shdh"

struct VertexInput
{
	float3 Position : POSITION0;
	float4 InstanceMatrix1 : COLOR1;
	float4 InstanceMatrix2 : COLOR2;
	float4 InstanceMatrix3 : COLOR3;
};

struct VertexOutput
{
	float4 ProjectedPosition : SV_Position0;
};

VertexOutput main(in VertexInput In)
{
	VertexOutput Out;

	// Create Instance World Matrix
	float4x4 noBillboardWorldMatrix = float4x4(In.InstanceMatrix1, In.InstanceMatrix2, In.InstanceMatrix3, float4(0.0f, 0.0f, 0.0f, 1.0f));

	// World space position
	float4 worldPosition = mul(noBillboardWorldMatrix, float4(In.Position, 1.0f));

	// Projected position
	float4 projectedPosition = mul(g_ViewProjectionMat, worldPosition);

	// Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;


	return Out;
}


[Fragment shader]


#include "Shaders/HLSL/Preamble.shdh"
#include "Shaders/HLSL/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : SV_Position0;
};

struct PixelOutput
{
	float4 Color0 : SV_Target0;
};

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	float3 Vector3Parameter_WaveColor;
	float PADDING_Vector3Parameter_WaveColor;
};
void CalculateMatEmissiveColor(out float3 out_0)
{
	// ConstantVector3Node {
	// } ConstantVector3Node
	out_0 = Vector3Parameter_WaveColor;
}

PixelOutput main(in PixelInput In)
{
	PixelOutput Out;

	float3 matEmissiveColor;
	CalculateMatEmissiveColor(matEmissiveColor);
	Out.Color0 = float4(matEmissiveColor, 1.0f);

	return Out;
}
