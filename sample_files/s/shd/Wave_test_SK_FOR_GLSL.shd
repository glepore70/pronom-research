[Vertex shader]

#version 450 core
#include "Shaders/GLSL/Preamble.shdh"
#include "Shaders/GLSL/CommonHelpers.shdh"
#include "Shaders/GLSL/GlobalConstants.shdh"

in uvec4 inBlendIndices0;
in vec4 inBlendWeight0;
in vec3 inPosition0;
in vec4 inNormal0;

out vec4 Position0;
out float TexCoord0;
out vec3 TexCoord1;
out vec3 TexCoord2;
out float TexCoord3;
out float FogLayer0;
out float FogLayer1;

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	mat4x3 BoneMatrices[128];
	mat4x4 WorldMatrix;
	vec3 Vector3Parameter_WaveColor;
	float FloatParameter_DepthDifferenceBlendDistance;
	float _OpacityFade;
	float PADDING0__OpacityFade;
	float PADDING1__OpacityFade;
	float PADDING2__OpacityFade;
};
void main()
{
	mat4x3 boneMatrix1 = BoneMatrices[inBlendIndices0.x];
	mat4x3 boneMatrix2 = BoneMatrices[inBlendIndices0.y];
	mat4x3 boneMatrix3 = BoneMatrices[inBlendIndices0.z];
	mat4x3 boneMatrix4 = BoneMatrices[inBlendIndices0.w];
	//World space position
	vec4 worldPosition = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.x * (boneMatrix1 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.y * (boneMatrix2 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.z * (boneMatrix3 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.w * (boneMatrix4 * vec4(inPosition0, 1.0f))));
	worldPosition = (WorldMatrix * worldPosition);

	//Projected position
	vec4 projectedPosition = (g_ViewProjectionMat * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//View space position
	vec4 viewPosition = (g_ViewMat * worldPosition);

	//Depth
	float depth = viewPosition.z;

	//Pass depth to pixel shader
	TexCoord0 = depth;

	//Compute local tangent frame
	mat3x3 localTangentFrame = GetTangentFrame(inNormal0);

	vec3 localNormal = localTangentFrame[2];

	//World space Normal
	vec3 worldNormal = vec3(0.0f, 0.0f, 0.0f);
	worldNormal = (worldNormal + (inBlendWeight0.x * (boneMatrix1 * vec4(localNormal, 0.0f))));
	worldNormal = (worldNormal + (inBlendWeight0.y * (boneMatrix2 * vec4(localNormal, 0.0f))));
	worldNormal = (worldNormal + (inBlendWeight0.z * (boneMatrix3 * vec4(localNormal, 0.0f))));
	worldNormal = (worldNormal + (inBlendWeight0.w * (boneMatrix4 * vec4(localNormal, 0.0f))));
	worldNormal = (WorldMatrix * vec4(worldNormal, 0.0f)).xyz;

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord1 = worldNormalNormalized;

	//World space view vector
	vec3 worldView = (g_CameraWorldPos.xyz - worldPosition.xyz);

	TexCoord2 = worldView;

	//Normalized Depth
	float depthNormalized = (depth / g_FarPlane);

	//Pass normalized depth to pixel shader
	TexCoord3 = depthNormalized;

	//Calculate Fog Layer 0 (EXP2)
	float fogLayer0;
	fogLayer0 = ComputeFogLayerExp2(depth, worldPosition.y, g_FogLayer0Density, g_FogLayer0NearStart, g_FogLayer0HeightStart, g_FogLayer0MaxHeight);
	FogLayer0 = fogLayer0;

	//Calculate Fog Layer 1 (EXP2)
	float fogLayer1;
	fogLayer1 = ComputeFogLayerExp2(depth, worldPosition.y, g_FogLayer1Density, g_FogLayer1NearStart, g_FogLayer1HeightStart, g_FogLayer1MaxHeight);
	FogLayer1 = fogLayer1;

	gl_Position = Position0;
}


[Fragment shader]

#version 450 core
#include "Shaders/GLSL/Preamble.shdh"
#include "Shaders/GLSL/CommonHelpers.shdh"
#include "Shaders/GLSL/GlobalConstants.shdh"
#include "Shaders/GLSL/Exposure.shdh"
#include "Shaders/GLSL/PBR.shdh"
#include "Shaders/GLSL/ImageBasedLightingHelpers.shdh"

in vec4 Position0;
in float TexCoord0;
in vec3 TexCoord1;
in vec3 TexCoord2;
in float TexCoord3;
in float FogLayer0;
in float FogLayer1;

out vec4 outColor0;

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	mat4x3 BoneMatrices[128];
	mat4x4 WorldMatrix;
	vec3 Vector3Parameter_WaveColor;
	float FloatParameter_DepthDifferenceBlendDistance;
	float _OpacityFade;
	float PADDING0__OpacityFade;
	float PADDING1__OpacityFade;
	float PADDING2__OpacityFade;
};
VK_DESCRIPTOR(DS_Shader, 3) sampler _PointMirrorSampler;
VK_DESCRIPTOR(DS_Shader, 4) texture2D _sceneDepth;
void CalculateMatOpacity(in vec2 in_0,
	in float in_1,
	out float out_0)
{
	//ConstantFloatNode {
	//} ConstantFloatNode
	//DepthDifferenceBlend
	float Local0 = (texture(_sceneDepth, in_0).x * g_FarPlane);
	float Local1 = (Local0 - in_1);
	float Local2 = Local1;
	float Local3 = clamp((Local2 / max(FloatParameter_DepthDifferenceBlendDistance, 0.0001f)), 0, 1);
	//~DepthDifferenceBlend

	float Local4 = clamp(Local3, 0.0f, 1.0f);
	float Local5 = Local4;
	float Local6 = (3.1415f * 5.0f);
	float Local7 = (Local6 * Local5);
	float Local8 = (g_CurrentTime * 5.0f);
	float Local9 = (Local7 + Local8);
	float Local10 = sin(Local9);
	float Local11 = (Local10 * Local10);
	float Local12 = (1.0f - Local11);
	float Local13 = (Local5 - Local12);
	out_0 = Local13;
}

void CalculateMatEmissiveColor(out vec3 out_0)
{
	//ConstantVector3Node {
	//} ConstantVector3Node
	out_0 = Vector3Parameter_WaveColor;
}

void main()
{
	float matOpacity;
	//UV position
	vec2 Local0 = (gl_FragCoord.xy / vec2(g_RTWidth, g_RTHeight));

	CalculateMatOpacity(Local0, TexCoord0, matOpacity);
	matOpacity = (matOpacity * _OpacityFade);

	vec3 matEmissiveColor;
	CalculateMatEmissiveColor(matEmissiveColor);
	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(TexCoord1);

	float matReflectance = 0.5f;
	matReflectance = RemapReflectance(matReflectance);
	float matRoughness = 0.5f;
	matRoughness = max(0.09f, matRoughness);
	vec3 FinalColor = vec3(0.0f, 0.0f, 0.0f);

	float exposure = LoadExposure();
	//Calculate Image Based Lighting
	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(TexCoord2);

	vec3 iblDiffuse;
	vec3 iblSpecular;
	EvaluateDistantIBL(vec3(0.0f, 0.0f, 0.0f), matRoughness, vec3(matReflectance, matReflectance, matReflectance), 0.0f, worldNormalNormalized, worldViewNormalized, iblDiffuse, iblSpecular);
	FinalColor = (FinalColor + ((iblDiffuse + iblSpecular) * exposure));

	vec3 LightDiffuseColorOut;
	vec3 LightSpecularColorOut;
	DirectionLight(worldNormalNormalized, worldViewNormalized, g_SunLightDirection, g_SunLightColor, vec3(0.0f, 0.0f, 0.0f), matReflectance, matRoughness, 0.0f, LightDiffuseColorOut, LightSpecularColorOut);
	LightDiffuseColorOut = (LightDiffuseColorOut * exposure);
	LightSpecularColorOut = (LightSpecularColorOut * exposure);
	FinalColor = (FinalColor + (LightDiffuseColorOut + LightSpecularColorOut));

	FinalColor = (FinalColor + (matEmissiveColor * !g_LightprobeCapture));

	FinalColor = mix((mix(g_FogLayer0Color, GetSkyColor(-(worldViewNormalized), TexCoord3), vec3(g_FogLayer0BlendWithSky, g_FogLayer0BlendWithSky, g_FogLayer0BlendWithSky)) * exposure), FinalColor, vec3(FogLayer0, FogLayer0, FogLayer0));
	FinalColor = mix((mix(g_FogLayer1Color, GetSkyColor(-(worldViewNormalized), TexCoord3), vec3(g_FogLayer1BlendWithSky, g_FogLayer1BlendWithSky, g_FogLayer1BlendWithSky)) * exposure), FinalColor, vec3(FogLayer1, FogLayer1, FogLayer1));

	outColor0 = vec4(FinalColor, matOpacity);
	outColor0 = max(outColor0, 0.0f);
}
