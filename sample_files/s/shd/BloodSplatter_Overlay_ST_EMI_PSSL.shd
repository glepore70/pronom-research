[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
	float3 LocalPosition : TEXCOORD0;
	float2 TexCoords0 : TEXCOORD1;
	float3 WorldNormal : TEXCOORD2;
	float3 WorldBinormal : TEXCOORD3;
	float3 WorldTangent : TEXCOORD4;
	float3 WorldView : TEXCOORD5;
};

@uniform float4x4 WorldMatrix;
VertexOutput main(in uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(WorldMatrix);

	VertexOutput Out;

	float4 tempPosStatic = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	//World space position
	float4 worldPosition = mul(WorldMatrix, tempPosStatic);

	//Projected position
	float4 projectedPosition = mul(g_ViewProjectionMat, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	//Pass local position to pixel shader
	Out.LocalPosition = SRT_VS_BUFFER_POSITION(id).xyz;

	Out.TexCoords0 = SRT_VS_BUFFER_TEXCOORD0(id);
	//Compute local tangent frame
	float3x3 localTangentFrame = GetTangentFrame(SRT_VS_BUFFER_QTANGENT(id));

	float3 localNormal = localTangentFrame[2];

	//World space Normal
	float3 worldNormal = mul(float3x3(WorldMatrix), localNormal);

	//Normalize World Normal
	float3 worldNormalNormalized = normalize(worldNormal);

	Out.WorldNormal = worldNormalNormalized;

	float3 localBinormal = localTangentFrame[1];

	//World space Binormal
	float3 worldBinormal = mul(float3x3(WorldMatrix), localBinormal);

	//Normalize World Binormal
	float3 worldBinormalNormalized = normalize(worldBinormal);

	Out.WorldBinormal = worldBinormalNormalized;

	float3 localTangent = localTangentFrame[0];

	//World space Tangent
	float3 worldTangent = mul(float3x3(WorldMatrix), localTangent);

	//Normalize World Tangent
	float3 worldTangentNormalized = normalize(worldTangent);

	Out.WorldTangent = worldTangentNormalized;

	//World space view vector
	float3 worldView = (g_CameraWorldPos.xyz - worldPosition.xyz);

	Out.WorldView = worldView;


	return Out;
}


[Fragment shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
	float3 LocalPosition : TEXCOORD0;
	float2 TexCoords0 : TEXCOORD1;
	float3 WorldNormal : TEXCOORD2;
	float3 WorldBinormal : TEXCOORD3;
	float3 WorldTangent : TEXCOORD4;
	float3 WorldView : TEXCOORD5;
};

struct PixelOutput
{
	float4 Color0 : S_TARGET_OUTPUT0;
};

@uniform float2 Vector2Parameter_Texture_01_UV;
@uniform float2 Vector2Parameter_Texture_01_Panning;
@uniform SamplerState _DefaultWrapSampler;
@uniform Texture2D Texture2DParameter_Texture_01_Map_DefaultWrapSampler;
@uniform float2 Vector2Parameter_Texture_02_UV;
@uniform float2 Vector2Parameter_Texture_02_Panning;
@uniform Texture2D Texture2DParameter_Texture_02_Map_DefaultWrapSampler;
@uniform float FloatParameter_BorderFresnel_Intensity;
@uniform Texture2D Texture2DParameter_NM_DefaultWrapSampler;
@uniform float FloatParameter_BorderFresnel_FresnelPower;
@uniform float FloatParameter_GradientMap_Contrast;
@uniform SamplerState _DefaultClampSampler;
@uniform Texture2D Texture2DParameter_GradientMap_Map_DefaultClampSampler;
@uniform float FloatParameter_Intensity;
void CalculateMatEmissiveColor(SrtPsData srtData : S_SRT_DATA,
	in float3 in_0,
	in float2 in_1,
	in float3 in_2,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(Vector2Parameter_Texture_01_UV);
	@uniform(Vector2Parameter_Texture_01_Panning);
	@uniform(_DefaultWrapSampler);
	@uniform(Texture2DParameter_Texture_01_Map_DefaultWrapSampler);
	@uniform(Vector2Parameter_Texture_02_UV);
	@uniform(Vector2Parameter_Texture_02_Panning);
	@uniform(Texture2DParameter_Texture_02_Map_DefaultWrapSampler);
	@uniform(FloatParameter_BorderFresnel_Intensity);
	@uniform(Texture2DParameter_NM_DefaultWrapSampler);
	@uniform(FloatParameter_BorderFresnel_FresnelPower);
	@uniform(FloatParameter_GradientMap_Contrast);
	@uniform(_DefaultClampSampler);
	@uniform(Texture2DParameter_GradientMap_Map_DefaultClampSampler);
	@uniform(FloatParameter_Intensity);

	//LocalPosition {
	//} LocalPosition
	float2 Local0 = in_0.xz;
	//ConstantVector2Node {
	//} ConstantVector2Node
	float2 Local1 = (Local0 * Vector2Parameter_Texture_01_UV);
	//ConstantVector2Node {
	//} ConstantVector2Node
	float2 Local2 = (g_CurrentTime * Vector2Parameter_Texture_01_Panning);
	float2 Local3 = (Local1 + Local2);
	//Texture2DNode {
	float4 Local4 = Texture2DParameter_Texture_01_Map_DefaultWrapSampler.Sample(_DefaultWrapSampler, Local3);
	//[Local4] Get needed components
	float Local5 = Local4.x;
	//} Texture2DNode
	//ConstantVector2Node {
	//} ConstantVector2Node
	float2 Local6 = (Local0 * Vector2Parameter_Texture_02_UV);
	//ConstantVector2Node {
	//} ConstantVector2Node
	float2 Local7 = (g_CurrentTime * Vector2Parameter_Texture_02_Panning);
	float2 Local8 = (Local6 + Local7);
	//Texture2DNode {
	float4 Local9 = Texture2DParameter_Texture_02_Map_DefaultWrapSampler.Sample(_DefaultWrapSampler, Local8);
	//[Local9] Get needed components
	float Local10 = Local9.x;
	//} Texture2DNode
	float Local11 = min(Local5, Local10);
	float Local12 = clamp(Local11, 0.0f, 1.0f);
	//ConstantFloatNode {
	//} ConstantFloatNode
	//Texture2DNode {
	float4 Local13 = Texture2DParameter_NM_DefaultWrapSampler.Sample(_DefaultWrapSampler, in_1);
	//[Local13] Convert normalmaps to tangent space vectors
	Local13.xyzw = Local13.wzyx;
	Local13.xyz = ((Local13.xyz * 2.0f) - 1.0f);
	Local13.z = -(Local13.z);
	Local13.xyz = normalize(Local13.xyz);
	//[Local13] Get needed components
	float3 Local14 = Local13.xyz;
	//} Texture2DNode
	//ConstantFloatNode {
	//} ConstantFloatNode
	//FresnelNode {
	float Local15 = pow((1.0f - saturate(dot(Local14, in_2))), FloatParameter_BorderFresnel_FresnelPower);
	//} FresnelNode
	float Local16 = lerp(Local12, FloatParameter_BorderFresnel_Intensity, Local15);
	//ConstantFloatNode {
	//} ConstantFloatNode
	float Local17 = pow(Local16, FloatParameter_GradientMap_Contrast);
	//ColorRampTextureNode {
	float4 Local18 = Texture2DParameter_GradientMap_Map_DefaultClampSampler.SampleLOD(_DefaultClampSampler, float2(Local17, 0.0f), 0.0f);
	float3 Local19 = Local18.xyz;
	//} ColorRampTextureNode
	//ConstantFloatNode {
	//} ConstantFloatNode
	float3 Local20 = (Local19 * FloatParameter_Intensity);
	out_0 = Local20;
}

PixelOutput main(in PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	PixelOutput Out;

	float3 matEmissiveColor;
	float3x3 NBT_WS = float3x3(In.WorldTangent, In.WorldNormal, In.WorldBinormal);

	//Normalized world space view vector
	float3 worldViewNormalized = normalize(In.WorldView);

	//Calculate tangent space view vector
	float3 tangentView = normalize(mul(NBT_WS, worldViewNormalized));

	CalculateMatEmissiveColor(srtData, In.LocalPosition.xyz, In.TexCoords0, tangentView, matEmissiveColor);
	Out.Color0 = float4(matEmissiveColor, 1.0f);

	return Out;
}
