[Vertex shader]

#version 450 core
#include "Shaders/GLSL/Preamble.shdh"
#include "Shaders/GLSL/CommonHelpers.shdh"
#include "Shaders/GLSL/GlobalConstants.shdh"

in vec3 inPosition0;
in vec2 inTexCoord0;
in vec4 inNormal0;

out vec4 Position0;
out vec3 TexCoord0;
out vec2 TexCoord1;
out vec3 TexCoord2;
out vec3 TexCoord3;
out vec3 WorldTangent;
out vec3 WorldView;

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	mat4x4 WorldMatrix;
	vec2 Vector2Parameter_Texture_01_UV;
	vec2 Vector2Parameter_Texture_01_Panning;
	vec2 Vector2Parameter_Texture_02_UV;
	vec2 Vector2Parameter_Texture_02_Panning;
	float FloatParameter_BorderFresnel_Intensity;
	float FloatParameter_BorderFresnel_FresnelPower;
	float FloatParameter_GradientMap_Contrast;
	float FloatParameter_Intensity;
};
void main()
{
	//World space position
	vec4 worldPosition = (WorldMatrix * vec4(inPosition0, 1.0f));

	//Projected position
	vec4 projectedPosition = (g_ViewProjectionMat * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	//Pass local position to pixel shader
	TexCoord0 = inPosition0;

	TexCoord1 = inTexCoord0;
	//Compute local tangent frame
	mat3x3 localTangentFrame = GetTangentFrame(inNormal0);

	vec3 localNormal = localTangentFrame[2];

	//World space Normal
	vec3 worldNormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localNormal);

	//Normalize World Normal
	vec3 worldNormalNormalized = normalize(worldNormal);

	TexCoord2 = worldNormalNormalized;

	vec3 localBinormal = localTangentFrame[1];

	//World space Binormal
	vec3 worldBinormal = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localBinormal);

	//Normalize World Binormal
	vec3 worldBinormalNormalized = normalize(worldBinormal);

	TexCoord3 = worldBinormalNormalized;

	vec3 localTangent = localTangentFrame[0];

	//World space Tangent
	vec3 worldTangent = (mat3x3(WorldMatrix[0].xyz, WorldMatrix[1].xyz, WorldMatrix[2].xyz) * localTangent);

	//Normalize World Tangent
	vec3 worldTangentNormalized = normalize(worldTangent);

	WorldTangent = worldTangentNormalized;

	//World space view vector
	vec3 worldView = (g_CameraWorldPos.xyz - worldPosition.xyz);

	WorldView = worldView;

	gl_Position = Position0;
}


[Fragment shader]

#version 450 core
#include "Shaders/GLSL/Preamble.shdh"
#include "Shaders/GLSL/CommonHelpers.shdh"
#include "Shaders/GLSL/GlobalConstants.shdh"

in vec4 Position0;
in vec3 TexCoord0;
in vec2 TexCoord1;
in vec3 TexCoord2;
in vec3 TexCoord3;
in vec3 WorldTangent;
in vec3 WorldView;

out vec4 outColor0;

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	mat4x4 WorldMatrix;
	vec2 Vector2Parameter_Texture_01_UV;
	vec2 Vector2Parameter_Texture_01_Panning;
	vec2 Vector2Parameter_Texture_02_UV;
	vec2 Vector2Parameter_Texture_02_Panning;
	float FloatParameter_BorderFresnel_Intensity;
	float FloatParameter_BorderFresnel_FresnelPower;
	float FloatParameter_GradientMap_Contrast;
	float FloatParameter_Intensity;
};
VK_DESCRIPTOR(DS_Shader, 3) sampler _DefaultWrapSampler;
VK_DESCRIPTOR(DS_Shader, 4) sampler _DefaultClampSampler;
VK_DESCRIPTOR(DS_Shader, 5) texture2D Texture2DParameter_Texture_01_Map_DefaultWrapSampler;
VK_DESCRIPTOR(DS_Shader, 6) texture2D Texture2DParameter_Texture_02_Map_DefaultWrapSampler;
VK_DESCRIPTOR(DS_Shader, 7) texture2D Texture2DParameter_NM_DefaultWrapSampler;
VK_DESCRIPTOR(DS_Shader, 8) texture2D Texture2DParameter_GradientMap_Map_DefaultClampSampler;
void CalculateMatEmissiveColor(in vec3 in_0,
	in vec2 in_1,
	in vec3 in_2,
	out vec3 out_0)
{
	//LocalPosition {
	//} LocalPosition
	vec2 Local0 = in_0.xz;
	//ConstantVector2Node {
	//} ConstantVector2Node
	vec2 Local1 = (Local0 * Vector2Parameter_Texture_01_UV);
	//ConstantVector2Node {
	//} ConstantVector2Node
	vec2 Local2 = (g_CurrentTime * Vector2Parameter_Texture_01_Panning);
	vec2 Local3 = (Local1 + Local2);
	//Texture2DNode {
	vec4 Local4 = texture(Texture2DParameter_Texture_01_Map_DefaultWrapSampler, Local3);
	//[Local4] Get needed components
	float Local5 = Local4.x;
	//} Texture2DNode
	//ConstantVector2Node {
	//} ConstantVector2Node
	vec2 Local6 = (Local0 * Vector2Parameter_Texture_02_UV);
	//ConstantVector2Node {
	//} ConstantVector2Node
	vec2 Local7 = (g_CurrentTime * Vector2Parameter_Texture_02_Panning);
	vec2 Local8 = (Local6 + Local7);
	//Texture2DNode {
	vec4 Local9 = texture(Texture2DParameter_Texture_02_Map_DefaultWrapSampler, Local8);
	//[Local9] Get needed components
	float Local10 = Local9.x;
	//} Texture2DNode
	float Local11 = min(Local5, Local10);
	float Local12 = clamp(Local11, 0.0f, 1.0f);
	//ConstantFloatNode {
	//} ConstantFloatNode
	//Texture2DNode {
	vec4 Local13 = texture(Texture2DParameter_NM_DefaultWrapSampler, in_1);
	//[Local13] Convert normalmaps to tangent space vectors
	Local13.xyzw = Local13.wzyx;
	Local13.xyz = ((Local13.xyz * 2.0f) - 1.0f);
	Local13.z = -(Local13.z);
	Local13.xyz = normalize(Local13.xyz);
	//[Local13] Get needed components
	vec3 Local14 = Local13.xyz;
	//} Texture2DNode
	//ConstantFloatNode {
	//} ConstantFloatNode
	//FresnelNode {
	float Local15 = pow((1.0f - clamp(dot(Local14, in_2), 0, 1)), FloatParameter_BorderFresnel_FresnelPower);
	//} FresnelNode
	float Local16 = mix(Local12, FloatParameter_BorderFresnel_Intensity, Local15);
	//ConstantFloatNode {
	//} ConstantFloatNode
	float Local17 = pow(Local16, FloatParameter_GradientMap_Contrast);
	//ColorRampTextureNode {
	vec4 Local18 = textureLod(Texture2DParameter_GradientMap_Map_DefaultClampSampler, vec2(Local17, 0.0f), 0.0f);
	vec3 Local19 = Local18.xyz;
	//} ColorRampTextureNode
	//ConstantFloatNode {
	//} ConstantFloatNode
	vec3 Local20 = (Local19 * FloatParameter_Intensity);
	out_0 = Local20;
}

void main()
{
	vec3 matEmissiveColor;
	mat3x3 NBT_WS = mat3x3(WorldTangent, TexCoord2, TexCoord3);

	//Normalized world space view vector
	vec3 worldViewNormalized = normalize(WorldView);

	//Calculate tangent space view vector
	vec3 tangentView = normalize((NBT_WS * worldViewNormalized));

	CalculateMatEmissiveColor(TexCoord0.xyz, TexCoord1, tangentView, matEmissiveColor);
	outColor0 = vec4(matEmissiveColor, 1.0f);
}
