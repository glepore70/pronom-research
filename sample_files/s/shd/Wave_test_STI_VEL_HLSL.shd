[Vertex shader]


#include "Shaders/HLSL/Preamble.shdh"
#include "Shaders/HLSL/CommonHelpers.shdh"
#include "Shaders/HLSL/GlobalConstants.shdh"

struct VertexInput
{
	float3 Position : POSITION0;
	float4 InstanceMatrix1 : COLOR1;
	float4 InstanceMatrix2 : COLOR2;
	float4 InstanceMatrix3 : COLOR3;
};

struct VertexOutput
{
	float4 ProjectedPosition : SV_Position0;
	float4 ProjectedPosition_prev : TEXCOORD0;
	float Depth : TEXCOORD1;
};

VertexOutput main(in VertexInput In)
{
	VertexOutput Out;

	// Create Instance World Matrix
	float4x4 noBillboardWorldMatrix = float4x4(In.InstanceMatrix1, In.InstanceMatrix2, In.InstanceMatrix3, float4(0.0f, 0.0f, 0.0f, 1.0f));

	// World space position
	float4 worldPosition = mul(noBillboardWorldMatrix, float4(In.Position, 1.0f));

	// Projected position
	float4 projectedPosition = mul(g_ViewProjectionMat, worldPosition);

	// Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;

	// Create Instance World Matrix
	float4x4 noBillboardWorldMatrix_prev = float4x4(In.InstanceMatrix1, In.InstanceMatrix2, In.InstanceMatrix3, float4(0.0f, 0.0f, 0.0f, 1.0f));

	// World space position
	float4 worldPosition_prev = mul(noBillboardWorldMatrix_prev, float4(In.Position, 1.0f));

	// Projected position (previous frame)
	float4 projectedPosition_prev = mul(g_ViewProjectionMat_prev, worldPosition_prev);

	// Pass projected position to pixel shader (previous frame)
	Out.ProjectedPosition_prev = projectedPosition_prev;

	// View space position
	float4 viewPosition = mul(g_ViewMat, worldPosition);

	// Depth
	float depth = viewPosition.z;

	// Pass depth to pixel shader
	Out.Depth = depth;


	return Out;
}


[Fragment shader]


#include "Shaders/HLSL/Preamble.shdh"
#include "Shaders/HLSL/CommonHelpers.shdh"
#include "Shaders/HLSL/GlobalConstants.shdh"
#include "Shaders/HLSL/ViewportHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : SV_Position0;
	float4 ProjectedPosition_prev : TEXCOORD0;
	float Depth : TEXCOORD1;
};

struct PixelOutput
{
	float2 Velocity : SV_Target0;
};

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	float FloatParameter_DepthDifferenceBlendDistance;
	float PADDING0_FloatParameter_DepthDifferenceBlendDistance;
	float PADDING1_FloatParameter_DepthDifferenceBlendDistance;
	float PADDING2_FloatParameter_DepthDifferenceBlendDistance;
};
VK_DESCRIPTOR(DS_Shader, 3) SamplerState _PointMirrorSampler;
VK_DESCRIPTOR(DS_Shader, 4) Texture2D _sceneDepth;
void CalculateMatOpacity(in float2 in_0,
	in float in_1,
	out float out_0)
{
	// ConstantFloatNode {
	// } ConstantFloatNode
	// DepthDifferenceBlend
	float Local0 = (_sceneDepth.Sample(_PointMirrorSampler, in_0).x * g_FarPlane);
	float Local1 = (Local0 - in_1);
	float Local2 = Local1;
	float Local3 = saturate((Local2 / max(FloatParameter_DepthDifferenceBlendDistance, 0.0001f)));
	// ~DepthDifferenceBlend

	float Local4 = clamp(Local3, 0.0f, 1.0f);
	float Local5 = Local4.x;
	float Local6 = (3.1415f * 5.0f);
	float Local7 = (Local6 * Local5);
	float Local8 = (g_CurrentTime * 5.0f);
	float Local9 = (Local7 + Local8);
	float Local10 = sin(Local9);
	float Local11 = (Local10 * Local10);
	float Local12 = (1.0f - Local11);
	float Local13 = (Local5 - Local12);
	out_0 = Local13;
}

PixelOutput main(in PixelInput In)
{
	PixelOutput Out;

	float matOpacity;
	// UV position
	float2 Local0 = (In.ProjectedPosition.xy / float2(g_RTWidth, g_RTHeight));

	CalculateMatOpacity(Local0, In.Depth, matOpacity);
	clip((matOpacity - 0.5f));

	// Current screen pos:
	float2 currentScreenPos = (In.ProjectedPosition.xy + float2(g_Jitter.x, -(g_Jitter.y)));

	// Previous screen pos:
	float2 previousUV = (((In.ProjectedPosition_prev.xy / In.ProjectedPosition_prev.w) * float2(0.5f, -0.5f)) + float2(0.5f, 0.5f));
	previousUV = ConvertTexCoordsVPtoRT(previousUV);
	float2 previousScreenPos = (previousUV * float2(g_RTWidth, g_RTHeight));
	previousScreenPos = (previousScreenPos + float2(g_PreviousJitter.x, -(g_PreviousJitter.y)));

	Out.Velocity = (currentScreenPos - previousScreenPos);

	return Out;
}
