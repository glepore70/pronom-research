[Vertex shader]

#version 450 core
#include "Shaders/GLSL/Preamble.shdh"
#include "Shaders/GLSL/CommonHelpers.shdh"
#include "Shaders/GLSL/GlobalConstants.shdh"

in uvec4 inBlendIndices0;
in vec4 inBlendWeight0;
in vec3 inPosition0;

out vec4 Position0;

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	mat4x3 BoneMatrices[128];
	mat4x4 WorldMatrix;
	vec3 Vector3Parameter_WaveColor;
	float PADDING_Vector3Parameter_WaveColor;
};
void main()
{
	mat4x3 boneMatrix1 = BoneMatrices[inBlendIndices0.x];
	mat4x3 boneMatrix2 = BoneMatrices[inBlendIndices0.y];
	mat4x3 boneMatrix3 = BoneMatrices[inBlendIndices0.z];
	mat4x3 boneMatrix4 = BoneMatrices[inBlendIndices0.w];
	//World space position
	vec4 worldPosition = vec4(0.0f, 0.0f, 0.0f, 1.0f);
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.x * (boneMatrix1 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.y * (boneMatrix2 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.z * (boneMatrix3 * vec4(inPosition0, 1.0f))));
	worldPosition.xyz = (worldPosition.xyz + (inBlendWeight0.w * (boneMatrix4 * vec4(inPosition0, 1.0f))));
	worldPosition = (WorldMatrix * worldPosition);

	//Projected position
	vec4 projectedPosition = (g_ViewProjectionMat * worldPosition);

	//Pass projected position to pixel shader
	Position0 = projectedPosition;

	gl_Position = Position0;
}


[Fragment shader]

#version 450 core
#include "Shaders/GLSL/Preamble.shdh"
#include "Shaders/GLSL/CommonHelpers.shdh"

in vec4 Position0;

out vec4 outColor0;

VK_DESCRIPTOR(DS_Shader, 0) cbuffer CB_MaterialConstants : register(b0)
{
	mat4x3 BoneMatrices[128];
	mat4x4 WorldMatrix;
	vec3 Vector3Parameter_WaveColor;
	float PADDING_Vector3Parameter_WaveColor;
};
void CalculateMatEmissiveColor(out vec3 out_0)
{
	//ConstantVector3Node {
	//} ConstantVector3Node
	out_0 = Vector3Parameter_WaveColor;
}

void main()
{
	vec3 matEmissiveColor;
	CalculateMatEmissiveColor(matEmissiveColor);
	outColor0 = vec4(matEmissiveColor, 1.0f);
}
