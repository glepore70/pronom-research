[Vertex shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct VertexOutput
{
	float4 ProjectedPosition : S_Position;
};

@uniform float4x4 WorldMatrix;
VertexOutput main(in uint id : S_VERTEX_ID,
	SrtVsData srtData : S_SRT_DATA)
{
	// Retrieve SRT data:
	@uniform(WorldMatrix);

	VertexOutput Out;

	float4 tempPosStatic = float4(SRT_VS_BUFFER_POSITION(id).xyz, 1.0f);
	//World space position
	float4 worldPosition = mul(WorldMatrix, tempPosStatic);

	//Projected position
	float4 projectedPosition = mul(g_ViewProjectionMat, worldPosition);

	//Pass projected position to pixel shader
	Out.ProjectedPosition = projectedPosition;


	return Out;
}


[Fragment shader]


#include "Shaders/PS4/srt_struct.h"
#include "Shaders/PS4/CommonHelpers.shdh"

struct PixelInput
{
	float4 ProjectedPosition : S_Position;
};

struct PixelOutput
{
	float4 Color0 : S_TARGET_OUTPUT0;
};

@uniform float3 Vector3Parameter_WaveColor;
void CalculateMatEmissiveColor(SrtPsData srtData : S_SRT_DATA,
	out float3 out_0)
{
	// Retrieve SRT data:
	@uniform(Vector3Parameter_WaveColor);

	//ConstantVector3Node {
	//} ConstantVector3Node
	out_0 = Vector3Parameter_WaveColor;
}

PixelOutput main(in PixelInput In,
	SrtPsData srtData : S_SRT_DATA)
{
	PixelOutput Out;

	float3 matEmissiveColor;
	CalculateMatEmissiveColor(srtData, matEmissiveColor);
	Out.Color0 = float4(matEmissiveColor, 1.0f);

	return Out;
}
