<ls:UIWidget
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:ls="clr-namespace:ls"
    mc:Ignorable="d"
    ls:UIWidget.UseCustomDC="True"
    ls:UIWidget.SoundID="UI_Gameplay_Book"
    ls:UIWidget.ContextName="Book">
    
    <ls:UIWidget.Resources>
        <ControlTemplate x:Key="BookTemplate" TargetType="ls:LSBook">
            <Grid>
                <Grid.Resources>
                    <Style TargetType="TextBlock">
                        <Setter Property="FontSize" Value="{DynamicResource DefaultFontSize}"/>
                        <Setter Property="Foreground" Value="{DynamicResource LS_PaperColor}"/>
                        <Setter Property="IsHitTestVisible" Value="False"/>
                    </Style>
                    <Style TargetType="ls:LSBookPage" BasedOn="{StaticResource {x:Type TextBlock}}">
                        <Setter Property="Width" Value="850"/>
                        <Setter Property="Foreground" Value="{DynamicResource LS_PaperColor}"/>
                        <Setter Property="TextWrapping" Value="Wrap"/>
                        <Setter Property="TextAlignment" Value="Left"/>
                        <Setter Property="FontSize" Value="{DynamicResource IntermediateFontSize}"/>
                        <Setter Property="LineStackingStrategy" Value="MaxHeight"/>
                        <Setter Property="LineHeight" Value="54"/>
                        <Setter Property="IsHitTestVisible" Value="False"/>
                    </Style>
                    <Style TargetType="ScrollViewer" BasedOn="{StaticResource {x:Type ScrollViewer}}">
                        <Setter Property="Height" Value="1060"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Top"/>
                        <Setter Property="IsHitTestVisible" Value="False"/>
                    </Style>
                    <Style TargetType="ls:LSButton" BasedOn="{StaticResource {x:Type ls:LSButton}}">
                        <Setter Property="Background" Value="Transparent"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsFocused" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>

                <ScrollViewer Grid.Column="0" x:Name="PART_LeftScroller" Margin="0,52,0,0" VerticalScrollBarVisibility="Hidden">
                    <ls:LSBookPage x:Name="PART_LeftPage"/>
                </ScrollViewer>
                <ScrollViewer Grid.Column="1" x:Name="PART_RightScroller" Margin="0,52,0,0" VerticalScrollBarVisibility="Hidden">
                    <ls:LSBookPage x:Name="PART_RightPage"/>
                </ScrollViewer>
                <TextBlock Grid.Column="0" Text="{Binding LeftNumber, RelativeSource={RelativeSource AncestorType={x:Type ls:LSBook}}}"
                           HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="95,0,0,30"/>
                <TextBlock Grid.Column="1" Text="{Binding RightNumber, RelativeSource={RelativeSource AncestorType={x:Type ls:LSBook}}}"
                           HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,90,30"/>
                <ls:LSButton Grid.Column="0" Command="ls:LSBook.PrevPageCommand" BoundEvent="{Binding IEventID}"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIRadialLeft'}"
                             IsEnabled="{Binding HasPrevPage, RelativeSource={RelativeSource AncestorType={x:Type ls:LSBook}}}"/>
                <ls:LSButton Grid.Column="1" Command="ls:LSBook.NextPageCommand" BoundEvent="{Binding IEventID}"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIRadialRight'}"
                             IsEnabled="{Binding HasNextPage, RelativeSource={RelativeSource AncestorType={x:Type ls:LSBook}}}"/>
            </Grid>
        </ControlTemplate>
    </ls:UIWidget.Resources>

    <!-- Grayed out full screen grid to block all inputs to widgets below until StateMachines flag DisableStatesBelow is fixed -->
    <Grid Background="#77000000">
        <Grid VerticalAlignment="Center" HorizontalAlignment="Center" Margin="50,0,0,140">

            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Book/Book_BG_B1.png" Stretch="None"/>

            <ls:LSBook x:Name="BookMain"
                    Margin="240,136,275,200"
                    Template="{StaticResource BookTemplate}"
                    Text="{Binding BookFullText}"                       
                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Book/Book_BG_tab.png" Stretch="None" Margin="0,0,1020,0" VerticalAlignment="Bottom" HorizontalAlignment="Right" 
                   Visibility="{Binding ElementName=BookMain,Path=HasNextPage,Converter={StaticResource BoolToVisibleConverter}}"/>

            <Grid HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,60,336,0" >
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>

                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Book/book_UI_close_bg.png" Stretch="None" Margin="0,0,8,0"/>

                <ls:LSButton Command="{Binding CustomEvent}" CommandParameter="CloseWidget"
                             SoundID="UI_Shared_Cancel"
                             VerticalAlignment="Top" Margin="0,40,0,0" >
                    <ls:LSButton.Template>
                        <ControlTemplate TargetType="ls:LSButton">
                            <ControlTemplate.Resources>
                                <BitmapImage x:Key="btnNormal" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/btn_hudNav_d.png"/>
                                <BitmapImage x:Key="btnHover" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/btn_hudNav_h.png" />
                                <BitmapImage x:Key="btnPressed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/btn_hudNav_p.png" />
                                <BitmapImage x:Key="btnDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Minimap/btn_hudNav_disabled.png" />
                            </ControlTemplate.Resources>

                            <Grid>
                                <Image x:Name="BtnBg" Source="{StaticResource btnNormal}" Stretch="None"/>
                                <Image x:Name="icon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/ico_btn_cross.png" Stretch="None"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="BtnBg" Property="Source" Value="{StaticResource btnHover}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="BtnBg" Property="Source" Value="{StaticResource btnPressed}" />
                                    <Setter TargetName="icon" Property="Margin" Value="0,4,0,0" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="BtnBg" Property="Source" Value="{StaticResource btnDisabled}" />
                                    <Setter TargetName="icon" Property="Opacity" Value="0.7" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ls:LSButton.Template>
                </ls:LSButton>
                
                <!--<ls:LSButton Style="{DynamicResource PopUpClose}"
                             Command="{Binding CustomEvent}" CommandParameter="CloseWidget"
                             SoundID="UI_Shared_Cancel"
                             VerticalAlignment="Top" Margin="0,20,0,0" />-->
            </Grid>
            
            
        </Grid>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,350">
            <StackPanel.Style>
                <Style TargetType="StackPanel">
                    <Setter Property="Visibility" Value="Collapsed"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Data.UIMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </StackPanel.Style>
            <ls:LSButton DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='SelectorMoveLeft'}"
                         Content="{Binding Source='UIBtnHint_Navigate',Converter={StaticResource TranslatedStringConverter}}" 
                         EatInput="False" Margin="20,0">
                <ls:LSButton.Style>
                    <Style TargetType="ls:LSButton" BasedOn="{StaticResource ControllerButton}">
                        <Setter Property="Visibility" Value="Visible"/>
                        <Style.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding HasPrevPage, ElementName=BookMain}" Value="False"/>
                                    <Condition Binding="{Binding HasNextPage, ElementName=BookMain}" Value="False"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </ls:LSButton.Style>
            </ls:LSButton>
            <ls:LSButton Style="{StaticResource ControllerButton}"
                         DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                         Content="{Binding Source='UIBtnHint_Close',Converter={StaticResource TranslatedStringConverter}}" 
                         Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                         CommandParameter="CloseWidget"
                         SoundID="UI_Shared_Cancel" Margin="20,0"/>
        </StackPanel>
    </Grid>

</ls:UIWidget>

