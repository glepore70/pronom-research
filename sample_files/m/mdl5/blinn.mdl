mdl 1.6;

using ::df import *;
using ::state import *;
using ::base import *;
using ::tex import *;
using ::anno import *;
using ::math import *;
using ::limits import *;

//- Custom annotation for Substance Designer specifics
import ::alg::base::annotations::*;

//- Core functions and materials for Substance Designer specifics
import ::alg::base::core::*;


export material blinn(

	varying color baseColor = color(0.214041) [[
		anno::display_name("Diffuse"),
		anno::in_group("Diffuse"),
		anno::description("Diffuse channel"),
		anno::usage("diffuse"),
		alg::base::annotations::gamma_type(gamma_srgb),
		alg::base::annotations::visible_by_default(true)
	]],

	varying float3 normal = state::normal() [[
		anno::display_name("Normal"),
		anno::in_group("Normal"),
		anno::description("Normal channel"),
		anno::usage("normal"),
		alg::base::annotations::gamma_type(gamma_linear),
		alg::base::annotations::visible_by_default(true)
	]],

	varying float height = float(0.5) [[
		anno::display_name("Height"),
		anno::in_group("Height"),
		anno::description("Height channel"),
		anno::usage("height"),
		alg::base::annotations::gamma_type(gamma_linear),
		alg::base::annotations::visible_by_default(true)
	]],

	uniform float heightScale = float(0) [[
		anno::display_name("Scale"),
		anno::in_group("Height"),
		anno::description("provides significant physical detail to the surface by manipulating the vertices of the mesh"),
		anno::usage("heightScale"),
		alg::base::annotations::visible_by_default(false)
	]],

	varying color emissiveColor = color(0) [[
		anno::display_name("Emissive"),
		anno::in_group("Emissive"),
		anno::description("Emissive channel"),
		anno::usage("emissive"),
		alg::base::annotations::gamma_type(gamma_srgb),
		alg::base::annotations::visible_by_default(false)
	]],

	uniform float emissiveIntensity = float(1) [[
		anno::display_name("Emissive Intensity"),
		anno::in_group("Emissive"),
		anno::description("Controls how much light is emitted from the surface"),
		alg::base::annotations::visible_by_default(false)
	]],

	varying color specular = color(0.214041) [[
		anno::display_name("Specular"),
		anno::in_group("Specular"),
		anno::description("Specular channel"),
		anno::usage("specular"),
		alg::base::annotations::gamma_type(gamma_srgb),
		alg::base::annotations::visible_by_default(true)
	]],

	varying float opacity = float(1) [[
		anno::display_name("Opacity"),
		anno::in_group("Opacity"),
		anno::description("Opacity channel"),
		anno::usage("opacity"),
		alg::base::annotations::gamma_type(gamma_linear),
		alg::base::annotations::visible_by_default(true)
	]],

	varying float glossiness = float(0.5) [[
		anno::display_name("Glossiness"),
		anno::in_group("Glossiness"),
		anno::description("Glossiness channel"),
		anno::usage("glossiness"),
		alg::base::annotations::gamma_type(gamma_linear),
		alg::base::annotations::visible_by_default(true)
	]],

	uniform float glossiness_scale = float(1) [[
		anno::display_name("Scale"),
		anno::in_group("Glossiness"),
		anno::description("Glossiness adjustments"),
		alg::base::annotations::visible_by_default(false)
	]]

) [[
    anno::display_name("Blinn"),
    anno::description("A material with a blinn shading"),
    anno::author(alg::base::core::ALLEGORITHMIC_AUTHOR),
    anno::copyright_notice(alg::base::core::ALLEGORITHMIC_COPYRIGHT),
    anno::version( 2018, 3, 0 ),
    anno::modified( 2018, 9, 14, "switch standard ::anno::usage( string hint )" )
]] = let{

	//- Ambient occlusion mix
	texture_return diffuse_color_mix = base::blend_color_layers(
		base: color(1.0),
		layers: base::color_layer[](
			base::color_layer(
				layer_color: specular,
				mode: base::color_layer_difference
			)
		)
	);

	color diffuse_color = baseColor;
	color specular_color = specular;
	float specular_weight = math::luminance(specular_color);

	texture_return specular_tint = base::blend_color_layers(
		base: color(1.0),
		layers: base::color_layer[](
			base::color_layer(
				layer_color: specular_color,
				mode: base::color_layer_color
			)
		)
	);

	//- roughness
	float roughness = math::max(1.0 - glossiness*glossiness_scale,0.0);

	//- Diffuse BRDF
	bsdf diffuse_brdf = df::diffuse_reflection_bsdf(tint: diffuse_color*diffuse_color_mix.tint, roughness: 0.0);

	//- Specular BRDF
	bsdf specular_brdf = df::simple_glossy_bsdf (tint: color(1), roughness_u: roughness*roughness);

	//- Metallic Model
	bsdf metallic_model = df::directional_factor(normal_tint: specular_tint.tint, grazing_tint: color(1.0), exponent: 3.0, base: specular_brdf);

	//- Custom curve for specular/diffuse angular mix
	bsdf diffuse_specular_mix = df::custom_curve_layer(normal_reflectivity: specular_weight, grazing_reflectivity: 1.0, exponent: 5.0,
		weight: 1.0, layer: metallic_model, base: diffuse_brdf);

	//- Displacement
	float displacement = heightScale*(height*2.0 - 1.0);

} in material(

	ior: color(1.5),

	surface: material_surface(
		scattering: diffuse_specular_mix,
		emission: material_emission(
			emission: df::diffuse_edf(),
			intensity: emissiveColor*emissiveIntensity
		)
	),

	geometry: material_geometry(
		normal: normal,
		displacement: displacement*state::normal(),
		cutout_opacity: opacity
	)
);
