*PPD-Adobe: "4.1"
*% XR_45051.spd: Simplified form of XR_45051.ppd
*LanguageEncoding: WindowsANSI
*PCFileName: "XR_45051.PPD"
*Product: "(Xerox 4505)"
*PSVersion: "(2013.109) 0"
*ModelName: "Xerox 4505 PS"
*NickName: "Xerox 4505 PS"
*OpenGroup: InstallableOptions/Options Installed
*OpenUI *Option1/Optional Lower Tray: Boolean
*DefaultOption1: False
*Option1 True/Installed: ""
*Option1 False/Not Installed: ""
*CloseUI: *Option1
*OpenUI *InstalledMemory/Total Printer Memory: PickOne
*DefaultInstalledMemory: None
*InstalledMemory None/ 6 MB RAM: ""
*InstalledMemory 10Meg/ 10 MB RAM: ""
*InstalledMemory 16Meg/ 16 MB RAM: ""
*CloseUI: *InstalledMemory
*CloseGroup: InstallableOptions
*UIConstraints: *Option1 False *InputSlot Lower
*LanguageLevel: "2"
*Protocols: PJL TBCP
*JCLBegin: "<1B>%-12345X@PJL<0A>"
*JCLToPSInterpreter: "@PJL ENTER LANGUAGE = POSTSCRIPT<0A>"
*JCLEnd: "<1B>%-12345X"
*TTRasterizer: Type42
*FreeVM: "980648"
*VMOption None: "980648"
*VMOption 10Meg: "1808040"
*VMOption 16Meg: "2848424"
*ColorDevice: False
*Password: "()" 
*ExitServer: "
 count 0 eq
 { false } { true exch startjob } ifelse
 not { 
     (WARNING: Cannot modify initial VM.) =
     (Missing or invalid password.) =
     (Please contact the author of this software.) = flush quit
     } if
"
*End
*OpenUI *Resolution/Resolution: PickOne
*DefaultResolution: 600dpi
*Resolution 600dpi/600 dpi: "
  2 dict 
    dup /HWResolution [600 600] put 
    dup /Policies
      1 dict dup /HWResolution 2 put 
  put setpagedevice
"
*End
*Resolution 300dpi/300 dpi: "
  2 dict 
    dup /HWResolution [300 300] put 
    dup /Policies
      1 dict dup /HWResolution 2 put 
  put setpagedevice
"
*End
*?Resolution: "
  save
    currentpagedevice /HWResolution get
    aload pop exch
    (          ) cvs print
    (x) print (          ) cvs print (dpi)
    = flush
  restore
"
*End
*CloseUI: *Resolution
*ScreenFreq: "85.0"
*ScreenAngle: "45.0"
*OpenUI *Smoothing/TrueRes Smoothing:  Boolean
*OrderDependency: 50 AnySetup *Smoothing
*DefaultSmoothing: Unknown
*Smoothing True/True: "
  2 dict
    dup /PostRenderingEnhance true put
    dup /PostRenderingEnhanceDetails
      2 dict
        dup /REValue 1 put
        dup /Type 10 put
  put setpagedevice 
"
*End
*Smoothing False/False: "
  2 dict
    dup /PostRenderingEnhance false put
    dup /PostRenderingEnhanceDetails
      2 dict
        dup /REValue 0 put
        dup /Type 10 put
  put setpagedevice 
"
*End
*?Smoothing: "
  save
  currentpagedevice /PostRenderingEnhance get
  {  4 dict
     dup 0 (False) put
     dup 1 (True) put
     currentpagedevice /PostRenderingEnhanceDetails get
    /REValue get 
    get 
  }
  {(False)}
  ifelse = flush
  restore
"
*End
*CloseUI: *Smoothing
*OpenUI *PageSize: PickOne
*OrderDependency: 30 AnySetup *PageSize
*DefaultPageSize: Unknown
*PageSize Letter/Letter: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize Legal/Legal: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [612 1008] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize A4/A4: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [595 842] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize A5/A5: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [420 595] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize ISOB5/ISOB5: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [499 709] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize Folio/Folio: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [612 935] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize Executive/Executive: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [522 756] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize Comm10/Comm #10 Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [297 684] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize DL/DL Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [312 624] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize C5/C5 Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [459 649] put dup /ImagingBBox null put setpagedevice"
*End
*PageSize Monarch/Monarch Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [279 540] put dup /ImagingBBox null put setpagedevice"
*End
*?PageSize: "
 save
   currentpagedevice /PageSize get aload pop
   2 copy gt {exch} if 
   (Unknown) 
  11 dict
   dup [612 792] (Letter) put
   dup [612 1008] (Legal) put
   dup [595 842] (A4) put
   dup [420 595] (A5) put
   dup [499 709] (ISOB5) put
   dup [612 935] (Folio) put
   dup [522 756] (Executive) put
   dup [297 684] (Comm10) put
   dup [312 624] (DL) put
   dup [459 649] (C5) put
   dup [279 540] (Monarch) put
 { exch aload pop 4 index sub abs 5 le exch 
   5 index sub abs 5 le and 
      {exch pop exit} {pop} ifelse
   } bind forall
   = flush pop pop
restore 
"
*End
*CloseUI: *PageSize
*OpenUI *PageRegion:  PickOne
*OrderDependency: 40 AnySetup *PageRegion
*DefaultPageRegion: Unknown
*PageRegion Letter/Letter: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [612 792] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion Legal/Legal: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [612 1008] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion A4/A4: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [595 842] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion A5/A5: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [420 595] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion ISOB5/ISOB5: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [499 709] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion Folio/Folio: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [612 935] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion Executive/Executive: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [522 756] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion Comm10/Comm #10 Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [297 684] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion DL/DL Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [312 624] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion C5/C5 Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [459 649] put dup /ImagingBBox null put setpagedevice"
*End
*PageRegion Monarch/Monarch Envelope: "
    1 dict dup /Policies 2 dict dup /PageSize 2 put dup /MediaType 0 put put setpagedevice
    2 dict dup /PageSize [279 540] put dup /ImagingBBox null put setpagedevice"
*End
*CloseUI: *PageRegion
*DefaultImageableArea: Unknown
*ImageableArea Letter/Letter: "14.160 11.880 597.840 780.120 "
*ImageableArea Legal/Legal: "14.160 11.880 597.839 996.120 "
*ImageableArea A4/A4: "13.478 11.984 581.798 829.904 "
*ImageableArea A5/A5: "10.084 13.597 409.444 581.677 "
*ImageableArea ISOB5/ISOB5: "13.529 11.179 489.689 697.483 "
*ImageableArea Folio/Folio: "14.160 11.880 597.840 924.120 "
*ImageableArea Executive/Executive: "11.471 11.879 510.671 744.119 "
*ImageableArea Comm10/Comm #10 Envelope: "14.100 11.880 282.900 672.120 "
*ImageableArea DL/DL Envelope: "13.826 11.930 297.985 611.690 "
*ImageableArea C5/C5 Envelope: "10.726 12.086 448.486 637.046 "
*ImageableArea Monarch/Monarch Envelope: "12.780 11.880 266.220 528.120 "
*?ImageableArea: "
 save
   /cvp { (                ) cvs print ( ) print } bind def
   /upperright {10000 mul floor 10000 div} bind def
   /lowerleft {10000 mul ceiling 10000 div} bind def
   newpath clippath pathbbox
   4 -2 roll exch 2 {lowerleft cvp} repeat
   exch 2 {upperright cvp} repeat flush
 restore
"
*End
*DefaultPaperDimension: Unknown
*PaperDimension Letter/Letter: "612 792"
*PaperDimension Legal/Legal: "612 1008"
*PaperDimension A4/A4: "595 842"
*PaperDimension A5/A5: "420 595"
*PaperDimension ISOB5/ISOB5: "499 709"
*PaperDimension Folio/Folio: "612 935"
*PaperDimension Executive/Executive: "522 756"
*PaperDimension Comm10/Comm #10 Envelope: "297 684"
*PaperDimension DL/DL Envelope: "312 624"
*PaperDimension C5/C5 Envelope: "459 649"
*PaperDimension Monarch/Monarch Envelope: "279 540"
*OpenUI *InputSlot: PickOne
*OrderDependency: 20 AnySetup *InputSlot
*DefaultInputSlot: Upper
*InputSlot Upper/Standard (Upper): "
  currentpagedevice /InputAttributes get
  0 get dup
  null eq {pop}
  { dup
    /InputAttributes
    1 dict dup /Priority [0] put
    put  setpagedevice
  } ifelse "
*End
*InputSlot Lower/Lower: "
  currentpagedevice /InputAttributes get
  1 get dup
  null eq {pop}
  { dup
    /InputAttributes
    1 dict dup /Priority [1] put
    put  setpagedevice
  } ifelse "
*End
*InputSlot MultiPurpose/MultiPurpose (MP): "
  currentpagedevice /InputAttributes get
  2 get dup
  null eq {pop}
  { dup
    /InputAttributes
    1 dict dup /Priority [2] put
    put  setpagedevice
  } ifelse "
*End
*?InputSlot: "
save
  3 dict
  dup /0 (Upper) put
  dup /1 (Lower) put
  dup /2 (MultiPurpose) put
  currentpagedevice /InputAttributes get
  dup /Priority known
  { /Priority get 0 get (      ) cvs cvn get }
  {
    dup length 1 eq
    { {pop} forall (       ) cvs cvn get }
    { pop pop (Unknown) } ifelse
  } ifelse
  = flush
restore
"
*End
*CloseUI: *InputSlot
*DefaultOutputBin:  OnlyOne
*OpenUI *ManualFeed/Manual Feed:  Boolean
*OrderDependency: 20 AnySetup *ManualFeed
*DefaultManualFeed: False
*ManualFeed True/True: "1 dict dup /ManualFeed true put setpagedevice"
*ManualFeed False/False: "1 dict dup /ManualFeed false put setpagedevice"
*?ManualFeed: "
  save
    currentpagedevice /ManualFeed get
    {(True)}{(False)}ifelse = flush
  restore
"
*End
*CloseUI: *ManualFeed
*DefaultFont: Courier
*Font AvantGarde-Book: Standard "(001.006S)" Standard ROM
*Font AvantGarde-BookOblique: Standard "(001.006S)" Standard ROM
*Font AvantGarde-Demi: Standard "(001.007S)" Standard ROM
*Font AvantGarde-DemiOblique: Standard "(001.007S)" Standard ROM
*Font Bookman-Demi: Standard "(001.003S)" Standard ROM
*Font Bookman-DemiItalic: Standard "(001.003S)" Standard ROM
*Font Bookman-Light: Standard "(001.003S)" Standard ROM
*Font Bookman-LightItalic: Standard "(001.003S)" Standard ROM
*Font Courier: Standard "(002.004S)" Standard ROM
*Font Courier-Bold: Standard "(002.004S)" Standard ROM
*Font Courier-BoldOblique: Standard "(002.004S)" Standard ROM
*Font Courier-Oblique: Standard "(002.004S)" Standard ROM
*Font Helvetica: Standard "(001.006S)" Standard ROM
*Font Helvetica-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow: Standard "(001.006S)" Standard ROM
*Font Helvetica-Narrow-Bold: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-BoldOblique: Standard "(001.007S)" Standard ROM
*Font Helvetica-Narrow-Oblique: Standard "(001.006S)" Standard ROM
*Font Helvetica-Oblique: Standard "(001.006S)" Standard ROM
*Font NewCenturySchlbk-Bold: Standard "(001.009S)" Standard ROM
*Font NewCenturySchlbk-BoldItalic: Standard "(001.007S)" Standard ROM
*Font NewCenturySchlbk-Italic: Standard "(001.006S)" Standard ROM
*Font NewCenturySchlbk-Roman: Standard "(001.007S)" Standard ROM
*Font Palatino-Bold: Standard "(001.005S)" Standard ROM
*Font Palatino-BoldItalic: Standard "(001.005S)" Standard ROM
*Font Palatino-Italic: Standard "(001.005S)" Standard ROM
*Font Palatino-Roman: Standard "(001.005S)" Standard ROM
*Font Symbol: Special "(001.007S)" Special ROM
*Font Times-Bold: Standard "(001.007S)" Standard ROM
*Font Times-BoldItalic: Standard "(001.009S)" Standard ROM
*Font Times-Italic: Standard "(001.007S)" Standard ROM
*Font Times-Roman: Standard "(001.007S)" Standard ROM
*Font ZapfChancery-MediumItalic: Standard "(001.007S)" Standard ROM
*Font ZapfDingbats: Special "(001.004S)" Special ROM
