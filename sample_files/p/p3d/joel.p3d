;P3D 2.1
(load 'p3d.lsp)

(setq square (triangle
		(make-vertex :x 0.0 :y 1.0 :z 0.0)
		(make-vertex :x 1.0 :y 1.0 :z 0.0)
		(make-vertex :x 0.0 :y 0.0 :z 0.0)
		(make-vertex :x 1.0 :y 0.0 :z 0.0) ))

(setq poly1
	(def-gob :attr (list (cons 'color red))
		:children (list
			(polygon
			(make-vertex :x 0.0 :y 0.0 :z -2.0 :clr blue)
			(make-vertex :x 6.0 :y 0.0 :z -2.0 :clr red)
			(make-vertex :x 6.0 :y 6.0 :z -2.0 :clr green)
			(make-vertex :x 0.0 :y 6.0 :z -2.0 :clr red) ))))

(setq pline1
	(def-gob :attr (list (cons 'color blue))
		:children (list
			(polyline
			(make-vertex :x 0.0 :y 0.0 :z -2.0)
			(make-vertex :x 0.0 :y 0.0 :z 5.0)
			(make-vertex :x 6.0 :y 0.0 :z 5.0)
			(make-vertex :x 6.0 :y 0.0 :z -2.0)
			(make-vertex :x 0.0 :y 0.0 :z -2.0)
			(make-vertex :x 0.0 :y 6.0 :z -2.0)
			(make-vertex :x 0.0 :y 6.0 :z 5.0)
			(make-vertex :x 0.0 :y 0.0 :z 5.0)
			(make-vertex :x 0.0 :y 0.0 :z -2.0) ))))

(setq polymarker1
	(polymarker
		(make-vertex :x 6.0 :y 6.0 :z 5.0)
		(make-vertex :x 5.5 :y 6.0 :z 5.0)
		(make-vertex :x 6.0 :y 5.5 :z 5.0)
		(make-vertex :x 6.0 :y 6.0 :z 4.5)))

(setq v1 (make-vertex :x 0.0 :y 0.0 :z -1.0))
(setq v2 (make-vertex :x 0.0 :y 0.0 :z 1.0))
(setq v3 (make-vertex :x 1.0 :y 0.0 :z 0.0))
(setq v4 (make-vertex :x -1.0 :y 0.0 :z 0.0))
(setq v5 (make-vertex :x 0.0 :y 1.0 :z 0.0))
(setq v6 (make-vertex :x 0.0 :y -1.0 :z 0.0))
(setq mesh1 (mesh (list v1 v2 v3 v4 v5 v6) 
	(list 	(list v1 v5 v3)
		(list v1 v3 v6) 
		(list v1 v6 v4) 
		(list v1 v4 v5) 
		(list v2 v3 v5) 
		(list v2 v6 v3) 
		(list v2 v4 v6) 
		(list v2 v5 v4))))

(setq patch1 (bezier
	(make-vertex :x 0.0 :y 0.0 :z 5.0)
	(make-vertex :x 2.0 :y 0.0 :z 6.0)
	(make-vertex :x 4.0 :y 0.0 :z 6.0)
	(make-vertex :x 6.0 :y 0.0 :z 5.0)
	(make-vertex :x 0.0 :y 2.0 :z 6.0)
	(make-vertex :x 2.0 :y 2.0 :z 7.0)
	(make-vertex :x 4.0 :y 2.0 :z 7.0)
	(make-vertex :x 6.0 :y 2.0 :z 6.0)
	(make-vertex :x 0.0 :y 4.0 :z 6.0)
	(make-vertex :x 2.0 :y 4.0 :z 7.0)
	(make-vertex :x 4.0 :y 4.0 :z 7.0)
	(make-vertex :x 6.0 :y 4.0 :z 6.0)
	(make-vertex :x 0.0 :y 6.0 :z 5.0)
	(make-vertex :x 2.0 :y 6.0 :z 6.0)
	(make-vertex :x 4.0 :y 6.0 :z 6.0)
	(make-vertex :x 6.0 :y 6.0 :z 5.0)))

(setq sphere1 (sphere))

(setq torus1 (torus '1.0 '0.3))

(setq cyl1
	(def-gob :children (list (cylinder))))

(setq text1
	(def-gob :attr (list (cons 'text-height 0.4 ))
		:children (list (text origin x-vec z-vec "Sample Text"))))

(setq cube
	(def-gob :children (list 
		(def-gob :children (list square) )
		(def-gob :transform (make-rotate x-vec 90.0)
			 :children (list square))
		(def-gob :transform (make-rotate y-vec 270.0)
			:children (list square))
		(def-gob :transform (compose-transform 
					(make-translate 1.0 0.0 0.0)
					(make-rotate y-vec 270.0))
			 :children (list square))
		(def-gob :transform (compose-transform
					(make-translate 0.0 1.0 0.0)
					(make-rotate x-vec 90.0))
			 :children (list square))
		(def-gob :transform (make-translate 0.0 0.0 1.0)
			 :children (list square)))
	))

(setq object
	(def-gob
		:attr (list (cons 'color green))
		:children (list
			(def-gob 
				:attr (list (cons 'color red))
				:transform (compose-transforms
						(make-translate 4.0 5.0 -2.0)
						(make-rotate x-vec 35.0)
						(make-rotate y-vec 25.0))
				 :children (list cube))
			(def-gob :transform (compose-transforms
						(make-translate -1.0 0.0 -1.0)
						(make-rotate x-vec 25.0)
						(make-rotate z-vec 35.0))
				 :children (list cube))
			(def-gob :transform (make-translate 3.0 0.0 -1.0)
				 :attr (list (cons 'color blue))
				 :children (list torus1))
			(def-gob :transform (make-translate 0.0 3.0 -1.0)
				 :children (list torus1))
			(def-gob :transform (make-translate 3.0 3.0 -1.0)
				 :children (list cyl1))
			(def-gob :transform (make-translate 0.0 0.0 5.0)
				 :attr (list (cons 'color
				   (make-color :r 1.0 :g 1.0 :b 0.0 :a 0.4)))
				 :children (list sphere1)) 
			pline1
			poly1
			text1
			polymarker1
			patch1
			(def-gob :attr (list (cons 'color white))
				 :transform (make-translate 0.0 0.0 1.0)
				 :children (list mesh1) )
			)))

(setq lights
	(def-gob
		:children (list
		(light (make-point :x 20.0 :y 0.0 :z 20.0)
		      (make-color :r 0.8 :g 0.8 :b 0.8))
		(ambient (make-color :r 0.4 :g 0.2 :b 0.2)) )))

(setq this-camera (make-camera
	:lookfrom (make-point :x -15.0 :y -21.0 :z 21.0)
	:lookat origin
	:fovea 45.0
	:up y-vec
	:hither -1.0
	:yon -50.0 ))

(snap object lights this-camera)
