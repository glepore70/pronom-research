Name
dumpkeymap - Dianostic dump of a .keymapping file
Synopsis
dumpkeymap [options] [-] [file...]
Description
dumpkeymap prints a textual representation of each Apple/NeXT .keymapping file mentioned on the command-line. If no files are mentioned and if the local machine is an Apple or NeXT installation, then the key mapping currently in use by the WindowServer and the AppKit is printed instead.
Options
-h --help
Display general program instructions and option summary.
-k --help-keymapping
Display a detailed description of the internal layout of a .keymapping file. This is the same information as that presented in the Key Mapping Description section of this document.
-o --help-output
Display an explanation of the output generated by dumpkeymap when dissecting a .keymapping file. This is the same information as that presented in the Output Description section of this document.
-f --help-files
Display a summary of the various files and directories which are related to key mappings. This is the same information as that presented in the Files section of this document.
-d --help-diagnostics
Display a list of the various diagnostic messages which may be emitted by dumpkeymap. This is the same information as that presented in the Diagnostics section of this document.
-v --version
Display the dumpkeymap version number and warranty information.
- --
Inhibit processing of options at this point in the argument list. An occurrence of `-' or `--' in the argument list causes all following arguments to be treated as file names even if an argument begins with a `-' character.
Key Mapping Description
The following sections describe, in complete detail, the format of a raw key mapping resource, as well as the format of the .keymapping file which encapsulates one or more raw mappings.
Types and Data
The following type definitions are employed throughout this discussion:

typedef unsigned char byte;
typedef unsigned short word;
typedef unsigned long dword;
Additionally, the type definition `number' is used generically to indicate a numeric value. The actual size of the `number' type may be one or two bytes depending upon how the data is stored in the key map. Although most key maps use byte-sized numeric values, word-sized values are also allowed.

Multi-byte values in a key mapping file are stored in big-endian byte order.

Key Mapping File and Device Mapping
A key mapping file begins with a magic-number and continues with a variable number of device-specific key mappings.

struct KeyMappingFile {
    char magic_number[4];    // `KYM1'
    DeviceMapping maps[...]; // Variable number of maps
    
    https://www.xfree86.org/current/dumpkeymap.1.html
