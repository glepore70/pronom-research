BABYL OPTIONS:
Version: 5
Labels:
Note:   This is the header of an rmail file.
Note:   If you are seeing it in rmail,
Note:    it means the file has no messages in it.

1,,
Received: from gray.csi.cam.ac.uk by cis.uab.edu (4.1/SMI-4.0)
	id AA04477; Wed, 21 Oct 92 08:01:51 CDT
Received: from mbuf.bio.cam.ac.uk by ppsw1.cam.ac.uk 
          with SMTP (PP-6.0) Cambridge as ppsw.cam.ac.uk 
          id <12514-0@ppsw1.cam.ac.uk>; Wed, 21 Oct 1992 14:05:16 +0100
Received: by mbuf.bio.cam.ac.uk (4.1/MDTG-V1.0@mbuf.bio.cam.ac.uk) id AA00383;
          Wed, 21 Oct 92 14:06:43 GMT
Return-Path: <wb104@mbuf.bio.cam.ac.uk>
From: Wayne Boucher <wb104@mbuf.bio.cam.ac.uk>
Date: Wed, 21 Oct 92 14:06:43 GMT
Message-Id: <9210211406.AA00383@mbuf.bio.cam.ac.uk>
To: schorn@inf.ethz.ch, sloan@cis.uab.edu
Subject: new code

*** EOOH ***
Return-Path: <wb104@mbuf.bio.cam.ac.uk>
From: Wayne Boucher <wb104@mbuf.bio.cam.ac.uk>
Date: Wed, 21 Oct 92 14:06:43 GMT
To: schorn@inf.ethz.ch, sloan@cis.uab.edu
Subject: new code

Hello, below is the code, modified to handle collinear points as mentioned
in my previous message.  Wayne

/*
 *  int is_polygon_convex(x, y, n)
 *	Data_type *x, *y;
 *	int n;
 *
 *  This routine determines if the polygon determined by the n points (x, y)
 *  is convex in O(n) time.  It could easily be modified to use O(1) space
 *  if desired.  The polygon may be self-intersecting.  See below for return
 *  values and the definition of Data_type.
 *
 *  The program is based on the ideas of Peter Schorn.
 *  The program was coded by Wayne Boucher.
 *  The program was bug-fixed, tested, etc., by Eric Haines.
 *
 *  20 October 1992
 */

/* the type of the data - change to "float" or whatever you use */
typedef int Data_type;

/* the possible return values */
#define  NOT_CONVEX  0
#define  CONVEX  1

/* the case NEITHER can easily occur if Data_type = int,
   not so easily if Data_type = float */
#define  NEITHER  0

/* the direction of an edge with respect to the x coordinates  */
#define  INCREASING  1
#define  DECREASING  2

#define  DIRECTION \
	 (x1 > 0) ? INCREASING : (x1 < 0) ? DECREASING : NEITHER

/* the sense of the angle determined by two consecutive edges */
#define  CLOCKWISE  1
#define  COUNTER_CLOCKWISE  2
#define  FORWARD  3
#define  BACKWARD  4

#define  ANGLE_SENSE \
((d = y1*x2 - x1*y2) > 0) ? CLOCKWISE : (d < 0) ? COUNTER_CLOCKWISE : \
((d = x1*x2 + y1*y2) > 0) ? FORWARD : (d < 0) ? BACKWARD : NEITHER

int is_polygon_convex(x, y, n)
    Data_type *x, *y;
    int n;
{
    int i, j, n1, nchanges, direction, sense;
    Data_type x1, y1, x2, y2, d;

    n1 = n - 1 ;
    x1 = x[n1] - x[n-2];  y1 = y[n1] - y[n-2];
    x2 = x[0] - x[n1];  y2 = y[0] - y[n1];

    direction = DIRECTION;
    sense = ANGLE_SENSE;

    nchanges = 0;
    for (i = 0; i < n1; i++)
    {
	x1 = x2;  y1 = y2;
	j = i + 1;
    	x2 = x[j] - x[i];  y2 = y[j] - y[i];

	switch (ANGLE_SENSE)
	{
	    case CLOCKWISE:
		if (sense == COUNTER_CLOCKWISE)  return  NOT_CONVEX;

		sense = CLOCKWISE;
		break;

	    case COUNTER_CLOCKWISE:
		if (sense == CLOCKWISE)  return  NOT_CONVEX;

		sense = COUNTER_CLOCKWISE;
		break;

	    case FORWARD:
		continue;

	    case BACKWARD:
		if (++nchanges > 2)  return  NOT_CONVEX;
		continue;
	}

	switch (DIRECTION)
	{
	    case INCREASING:
	    	if (direction == DECREASING)
		    if (++nchanges > 2)  return  NOT_CONVEX;

	    	direction = INCREASING;
		break;

	    case DECREASING:
	    	if (direction == INCREASING)
		    if (++nchanges > 2)  return  NOT_CONVEX;

	    	direction = DECREASING;
		break;
	}
    }

    return CONVEX;
}

